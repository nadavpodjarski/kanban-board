[{"/home/nadav/Documents/projects/kibana/src/index.tsx":"1","/home/nadav/Documents/projects/kibana/src/reportWebVitals.ts":"2","/home/nadav/Documents/projects/kibana/src/App.tsx":"3","/home/nadav/Documents/projects/kibana/src/components/Header.tsx":"4","/home/nadav/Documents/projects/kibana/src/components/Footer.tsx":"5","/home/nadav/Documents/projects/kibana/src/components/Main.tsx":"6","/home/nadav/Documents/projects/kibana/src/components/Column.tsx":"7","/home/nadav/Documents/projects/kibana/src/components/Card.tsx":"8","/home/nadav/Documents/projects/kibana/src/redux/store.ts":"9","/home/nadav/Documents/projects/kibana/src/redux/reducer.ts":"10","/home/nadav/Documents/projects/kibana/src/redux/actions.ts":"11","/home/nadav/Documents/projects/kibana/src/redux/types.ts":"12","/home/nadav/Documents/projects/kibana/src/components/AddCard.tsx":"13","/home/nadav/Documents/projects/kibana/src/utils/index.ts":"14","/home/nadav/Documents/projects/kibana/src/components/DynamicModal.tsx":"15","/home/nadav/Documents/projects/kibana/src/resources/logopath.ts":"16","/home/nadav/Documents/projects/kibana/src/components/AddColumn.tsx":"17","/home/nadav/Documents/projects/kibana/src/components/EditCardModal.tsx":"18","/home/nadav/Documents/projects/kibana/src/components/AddColumnModal.tsx":"19","/home/nadav/Documents/projects/kibana/src/components/EditColumnModal.tsx":"20","/home/nadav/Documents/projects/kibana/src/components/ClickAwayListener.tsx":"21"},{"size":500,"mtime":1609490824250,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1609490824250,"results":"24","hashOfConfig":"23"},{"size":494,"mtime":1609944500456,"results":"25","hashOfConfig":"23"},{"size":1726,"mtime":1609971996185,"results":"26","hashOfConfig":"23"},{"size":350,"mtime":1610109893169,"results":"27","hashOfConfig":"23"},{"size":4279,"mtime":1610200226901,"results":"28","hashOfConfig":"23"},{"size":6910,"mtime":1610404413907,"results":"29","hashOfConfig":"23"},{"size":2833,"mtime":1610112240403,"results":"30","hashOfConfig":"23"},{"size":403,"mtime":1610061579064,"results":"31","hashOfConfig":"23"},{"size":5371,"mtime":1610395530407,"results":"32","hashOfConfig":"23"},{"size":1713,"mtime":1610057770439,"results":"33","hashOfConfig":"23"},{"size":362,"mtime":1610057770475,"results":"34","hashOfConfig":"23"},{"size":2406,"mtime":1610404383746,"results":"35","hashOfConfig":"23"},{"size":373,"mtime":1610184450170,"results":"36","hashOfConfig":"23"},{"size":1509,"mtime":1610206528648,"results":"37","hashOfConfig":"23"},{"size":1716,"mtime":1609971996189,"results":"38","hashOfConfig":"23"},{"size":1585,"mtime":1610388821489,"results":"39","hashOfConfig":"23"},{"size":2930,"mtime":1610204424995,"results":"40","hashOfConfig":"23"},{"size":2655,"mtime":1610394503610,"results":"41","hashOfConfig":"23"},{"size":2521,"mtime":1610279680927,"results":"42","hashOfConfig":"23"},{"size":614,"mtime":1610241930211,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"mess1s",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/home/nadav/Documents/projects/kibana/src/index.tsx",[],["89","90"],"/home/nadav/Documents/projects/kibana/src/reportWebVitals.ts",[],"/home/nadav/Documents/projects/kibana/src/App.tsx",[],"/home/nadav/Documents/projects/kibana/src/components/Header.tsx",[],"/home/nadav/Documents/projects/kibana/src/components/Footer.tsx",[],"/home/nadav/Documents/projects/kibana/src/components/Main.tsx",[],"/home/nadav/Documents/projects/kibana/src/components/Column.tsx",[],"/home/nadav/Documents/projects/kibana/src/components/Card.tsx",[],"/home/nadav/Documents/projects/kibana/src/redux/store.ts",[],"/home/nadav/Documents/projects/kibana/src/redux/reducer.ts",["91"],"import { v4 as uuid } from \"uuid\";\nimport { ColumnType } from \"../components/Column\";\nimport { CardType } from \"../components/Card\";\n\nimport * as types from \"./types\";\n\nconst items: CardType[] = [];\n\ntype Columns = Map<string, ColumnType>;\n\nconst salesColumns: Columns = new Map().set(uuid(), { name: \"To do\", items });\n// .set(uuid(), { name: \"In Progress\", items })\n// .set(uuid(), { name: \"Done\", items });\n\nconst rndColumns: Columns = new Map()\n  .set(uuid(), { name: \"To do\", items })\n  .set(uuid(), { name: \"In Progress\", items })\n  .set(uuid(), { name: \"Done\", items });\n\ntype Boards = Map<string, { name: string; columns: Columns }>;\nconst boards: Boards = new Map().set(uuid(), {\n  name: \"Sales\",\n  columns: salesColumns,\n});\n// .set(uuid(), { name: \"R&D\", columns: rndColumns });\n\nexport interface IAPPState {\n  boards: Boards;\n}\n\nconst initialState: IAPPState = {\n  boards,\n};\n\nexport const appReducer = (\n  state = initialState,\n  action: { type: string; payload: any }\n) => {\n  switch (action.type) {\n    case types.DRAG_END: {\n      const { source, destination, type } = action.payload.result;\n      const { boardId } = action.payload;\n      const board = state.boards.get(boardId);\n      let columns = board?.columns as NonNullable<Columns>;\n\n      if (type === \"DROPPABLE_COLUMN\") {\n        if (source.droppableId !== destination.droppableId) {\n          const sourceColumn = columns.get(\n            source.droppableId\n          ) as NonNullable<ColumnType>;\n\n          const destColumn = columns.get(\n            destination.droppableId\n          ) as NonNullable<ColumnType>;\n\n          const sourceItems = [...sourceColumn.items];\n          const destItems = [...destColumn.items];\n          const [removed] = sourceItems?.splice(source.index, 1);\n\n          destItems.splice(destination.index, 0, removed);\n\n          columns.set(source.droppableId, {\n            ...sourceColumn,\n            items: sourceItems,\n          });\n          columns.set(destination.droppableId, {\n            ...destColumn,\n            items: destItems,\n          });\n        } else {\n          const column = columns.get(\n            source.droppableId\n          ) as NonNullable<ColumnType>;\n          const copiedItems = [...column.items];\n          const [moved] = copiedItems.splice(source.index, 1);\n          copiedItems.splice(destination.index, 0, moved);\n          columns.set(source.droppableId, {\n            ...column,\n            items: copiedItems,\n          });\n        }\n      }\n      if (type === \"DROPPABLE_BOARD\" && board) {\n        const columnsEntries = [...columns.entries()] as [string, ColumnType][];\n        const [moved] = columnsEntries.splice(source.index, 1);\n        columnsEntries.splice(destination.index, 0, moved);\n\n        const newColumnsMap: Columns = new Map(columnsEntries);\n        boards.set(boardId, { ...board, columns: newColumnsMap });\n      }\n      return { ...state };\n    }\n    case types.ADD_CARD: {\n      const { boardId, columnId, newCard } = action.payload;\n      const board = state.boards.get(boardId);\n      const columns = board!.columns;\n\n      const column = columns.get(columnId);\n\n      if (column) {\n        let cards = column.items;\n        const newCards = [newCard, ...cards];\n        columns.set(columnId, {\n          ...column,\n          items: newCards,\n        });\n      }\n      return { ...state };\n    }\n    case types.DELETE_CARD: {\n      const { boardId, columnId, cardId } = action.payload;\n      const board = state.boards.get(boardId);\n      const columns = board!.columns;\n\n      const cards = columns!.get(columnId)!.items;\n      columns.get(columnId)!.items = [\n        ...cards.filter((card) => card.id !== cardId),\n      ];\n\n      return { ...state };\n    }\n    case types.EDIT_CARD: {\n      const { boardId, columnId, updatedCard } = action.payload;\n      const board = state.boards.get(boardId);\n      const columns = board?.columns;\n\n      const item = columns\n        ?.get(columnId)!\n        .items.find((item) => item.id === updatedCard.id);\n      Object.assign(item, updatedCard);\n\n      return { ...state };\n    }\n    case types.ADD_COLUMN: {\n      const { boardId, newColumn } = action.payload;\n      const board = state.boards.get(boardId);\n      const columns = board?.columns;\n      columns?.set(uuid(), newColumn);\n\n      return { ...state };\n    }\n    case types.DELETE_COLUMN: {\n      const { boardId, columnId } = action.payload;\n      const board = state.boards.get(boardId);\n      const columns = board?.columns;\n      columns?.delete(columnId);\n      return { ...state };\n    }\n    case types.EDIT_COLUMN: {\n      const { boardId, columnId, name } = action.payload;\n      state.boards.get(boardId)!.columns.get(columnId)!.name = name;\n      return { ...state };\n    }\n    default:\n      return state;\n  }\n};\n\nexport interface IUIState {\n  isModalOpen: boolean;\n  modal: any;\n}\n\nconst uiInitialState: IUIState = {\n  isModalOpen: true,\n  modal: {},\n};\n\nexport const uiReducer = (\n  state = uiInitialState,\n  action: { type: string; payload: any }\n): IUIState => {\n  switch (action.type) {\n    case types.OPEN_MODAL:\n      return {\n        ...state,\n        isModalOpen: true,\n        modal: action.payload,\n      };\n    case types.CLOSE_MODAL:\n      return {\n        ...state,\n        isModalOpen: false,\n        modal: {},\n      };\n    default:\n      return state;\n  }\n};\n","/home/nadav/Documents/projects/kibana/src/redux/actions.ts",[],"/home/nadav/Documents/projects/kibana/src/redux/types.ts",[],"/home/nadav/Documents/projects/kibana/src/components/AddCard.tsx",[],"/home/nadav/Documents/projects/kibana/src/utils/index.ts",[],["92","93"],"/home/nadav/Documents/projects/kibana/src/components/DynamicModal.tsx",[],"/home/nadav/Documents/projects/kibana/src/resources/logopath.ts",[],"/home/nadav/Documents/projects/kibana/src/components/AddColumn.tsx",[],"/home/nadav/Documents/projects/kibana/src/components/EditCardModal.tsx",[],"/home/nadav/Documents/projects/kibana/src/components/AddColumnModal.tsx",[],"/home/nadav/Documents/projects/kibana/src/components/EditColumnModal.tsx",[],"/home/nadav/Documents/projects/kibana/src/components/ClickAwayListener.tsx",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":15,"column":7,"nodeType":"100","messageId":"101","endLine":15,"endColumn":26},{"ruleId":"94","replacedBy":"102"},{"ruleId":"96","replacedBy":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"@typescript-eslint/no-unused-vars","'rndColumns' is assigned a value but never used.","Identifier","unusedVar",["104"],["105"],"no-global-assign","no-unsafe-negation"]